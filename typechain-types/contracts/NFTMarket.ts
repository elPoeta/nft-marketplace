/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace NFTMarket {
  export type MarketItemStruct = {
    itemId: PromiseOrValue<BigNumberish>;
    nftContract: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    createAt: PromiseOrValue<BigNumberish>;
    sold: PromiseOrValue<boolean>;
  };

  export type MarketItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    itemId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    createAt: BigNumber;
    sold: boolean;
  };
}

export interface NFTMarketInterface extends utils.Interface {
  functions: {
    "buyNFT(address,uint256)": FunctionFragment;
    "createMarketItem(address,uint256,uint256)": FunctionFragment;
    "fetchMarketItems(uint256,uint256,uint256)": FunctionFragment;
    "fetchMarketItemsByTime(uint256,uint256)": FunctionFragment;
    "getItemById(uint256)": FunctionFragment;
    "getListingFee()": FunctionFragment;
    "getMarketItems()": FunctionFragment;
    "getNFTByOwner()": FunctionFragment;
    "getNFTBySeller()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getTotalItems()": FunctionFragment;
    "setListingFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyNFT"
      | "createMarketItem"
      | "fetchMarketItems"
      | "fetchMarketItemsByTime"
      | "getItemById"
      | "getListingFee"
      | "getMarketItems"
      | "getNFTByOwner"
      | "getNFTBySeller"
      | "getOwner"
      | "getTotalItems"
      | "setListingFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItemsByTime",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTByOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTBySeller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setListingFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItemsByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingFee",
    data: BytesLike
  ): Result;

  events: {
    "marketItemNFT(uint256,address,uint256,address,address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "marketItemNFT"): EventFragment;
}

export interface marketItemNFTEventObject {
  itemId: BigNumber;
  nftContract: string;
  tokenId: BigNumber;
  seller: string;
  owner: string;
  price: BigNumber;
  createAt: BigNumber;
  sold: boolean;
}
export type marketItemNFTEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, BigNumber, boolean],
  marketItemNFTEventObject
>;

export type marketItemNFTEventFilter = TypedEventFilter<marketItemNFTEvent>;

export interface NFTMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyNFT(
      nftContract: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMarketItem(
      nftContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchMarketItems(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      sold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [NFTMarket.MarketItemStructOutput[], BigNumber, BigNumber] & {
        nextOffset: BigNumber;
        totalSolded: BigNumber;
      }
    >;

    fetchMarketItemsByTime(
      time: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketItemStructOutput[]]>;

    getItemById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketItemStructOutput]>;

    getListingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketItems(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketItemStructOutput[]]>;

    getNFTByOwner(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketItemStructOutput[]]>;

    getNFTBySeller(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketItemStructOutput[]]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getTotalItems(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    setListingFee(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyNFT(
    nftContract: PromiseOrValue<string>,
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMarketItem(
    nftContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchMarketItems(
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    sold: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [NFTMarket.MarketItemStructOutput[], BigNumber, BigNumber] & {
      nextOffset: BigNumber;
      totalSolded: BigNumber;
    }
  >;

  fetchMarketItemsByTime(
    time: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketItemStructOutput[]>;

  getItemById(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketItemStructOutput>;

  getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketItems(
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketItemStructOutput[]>;

  getNFTByOwner(
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketItemStructOutput[]>;

  getNFTBySeller(
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketItemStructOutput[]>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getTotalItems(overrides?: CallOverrides): Promise<BigNumber>;

  setListingFee(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyNFT(
      nftContract: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketItem(
      nftContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchMarketItems(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      sold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [NFTMarket.MarketItemStructOutput[], BigNumber, BigNumber] & {
        nextOffset: BigNumber;
        totalSolded: BigNumber;
      }
    >;

    fetchMarketItemsByTime(
      time: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketItemStructOutput[]>;

    getItemById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketItemStructOutput>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketItems(
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketItemStructOutput[]>;

    getNFTByOwner(
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketItemStructOutput[]>;

    getNFTBySeller(
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketItemStructOutput[]>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getTotalItems(overrides?: CallOverrides): Promise<BigNumber>;

    setListingFee(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "marketItemNFT(uint256,address,uint256,address,address,uint256,uint256,bool)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      nftContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      owner?: null,
      price?: null,
      createAt?: null,
      sold?: null
    ): marketItemNFTEventFilter;
    marketItemNFT(
      itemId?: PromiseOrValue<BigNumberish> | null,
      nftContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      owner?: null,
      price?: null,
      createAt?: null,
      sold?: null
    ): marketItemNFTEventFilter;
  };

  estimateGas: {
    buyNFT(
      nftContract: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMarketItem(
      nftContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchMarketItems(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      sold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchMarketItemsByTime(
      time: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTByOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTBySeller(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalItems(overrides?: CallOverrides): Promise<BigNumber>;

    setListingFee(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyNFT(
      nftContract: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMarketItem(
      nftContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchMarketItems(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      sold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMarketItemsByTime(
      time: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTByOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTBySeller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setListingFee(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
