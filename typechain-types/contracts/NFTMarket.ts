/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface NFTMarketInterface extends utils.Interface {
  functions: {
    "getOwner()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getOwner"): FunctionFragment;

  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;

  events: {
    "createMarketItem(uint256,address,uint256,address,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "createMarketItem"): EventFragment;
}

export interface createMarketItemEventObject {
  itemId: BigNumber;
  nftContract: string;
  tokenId: BigNumber;
  seller: string;
  owner: string;
  price: BigNumber;
  sold: boolean;
}
export type createMarketItemEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
  createMarketItemEventObject
>;

export type createMarketItemEventFilter =
  TypedEventFilter<createMarketItemEvent>;

export interface NFTMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOwner(overrides?: CallOverrides): Promise<[string]>;
  };

  getOwner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getOwner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "createMarketItem(uint256,address,uint256,address,address,uint256,bool)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      nftContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): createMarketItemEventFilter;
    createMarketItem(
      itemId?: PromiseOrValue<BigNumberish> | null,
      nftContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): createMarketItemEventFilter;
  };

  estimateGas: {
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
