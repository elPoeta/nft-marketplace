/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { NFTMarket, NFTMarketInterface } from "../../contracts/NFTMarket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__ItemId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requiered",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__ListingFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__Price",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__SetListingFee",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sold",
        type: "bool",
      },
    ],
    name: "marketItemNFT",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "fetchMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "nextOffset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getItemById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getListingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNFTByOwner",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNFTBySeller",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setListingFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506608e1bc9bf04000600481905550612275806100776000396000f3fe6080604052600436106100915760003560e01c80637063b64e116100595780637063b64e1461015c578063893d20e81461019b578063a82ba76f146101c6578063b8fe6abe146101e2578063cd2f07101461020d57610091565b8063035b987e1461009657806303976f76146100c1578063131dbd09146100ec57806329aa3a421461011557806358eb2df514610140575b600080fd5b3480156100a257600080fd5b506100ab61024a565b6040516100b89190611d75565b60405180910390f35b3480156100cd57600080fd5b506100d6610513565b6040516100e39190611d75565b60405180910390f35b3480156100f857600080fd5b50610113600480360381019061010e9190611973565b6107dc565b005b34801561012157600080fd5b5061012a610876565b6040516101379190611d75565b60405180910390f35b61015a60048036038101906101559190611920565b610b09565b005b34801561016857600080fd5b50610183600480360381019061017e91906119a0565b610e71565b60405161019293929190611d97565b60405180910390f35b3480156101a757600080fd5b506101b061116d565b6040516101bd9190611c99565b60405180910390f35b6101e060048036038101906101db91906118e0565b611197565b005b3480156101ee57600080fd5b506101f76114dd565b6040516102049190611e70565b60405180910390f35b34801561021957600080fd5b50610234600480360381019061022f9190611973565b6114e7565b6040516102419190611e55565b60405180910390f35b6060600061025860016116a7565b90506000610265826116b5565b90506000808267ffffffffffffffff811115610284576102836120c4565b5b6040519080825280602002602001820160405280156102bd57816020015b6102aa611835565b8152602001906001900390816102a25790505b50905060005b84811015610508573373ffffffffffffffffffffffffffffffffffffffff16600560006001846102f39190611f03565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156104f5576000600560006001846103549190611f03565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106104d9576104d8612095565b5b602002602001018190525084806104ef9061201d565b95505050505b80806105009061201d565b9150506102c3565b508094505050505090565b6060600061052160016116a7565b9050600061052e8261176a565b90506000808267ffffffffffffffff81111561054d5761054c6120c4565b5b60405190808252806020026020018201604052801561058657816020015b610573611835565b81526020019060019003908161056b5790505b50905060005b848110156107d1573373ffffffffffffffffffffffffffffffffffffffff16600560006001846105bc9190611f03565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107be5760006005600060018461061d9190611f03565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106107a2576107a1612095565b5b602002602001018190525084806107b89061201d565b95505050505b80806107c99061201d565b91505061058c565b508094505050505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086c576040517f1ff4873200000000000000000000000000000000000000000000000000000000815260040161086390611df5565b60405180910390fd5b8060048190555050565b6060600061088460016116a7565b9050600061089260026116a7565b8261089d9190611f59565b905060008167ffffffffffffffff8111156108bb576108ba6120c4565b5b6040519080825280602002602001820160405280156108f457816020015b6108e1611835565b8152602001906001900390816108d95790505b5090506000805b84811015610afe57600560006001836109149190611f03565b815260200190815260200160002060060160009054906101000a900460ff16610aeb5760006005600060018461094a9190611f03565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff161515151581525050858581518110610acf57610ace612095565b5b60200260200101819052508380610ae59061201d565b94505050505b8080610af69061201d565b9150506108fb565b508194505050505090565b60026000541415610b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4690611e35565b60405180910390fd5b600260008190555060008111610b9a576040517fb0cca22b000000000000000000000000000000000000000000000000000000008152600401610b9190611e15565b60405180910390fd5b6004543414610be2576004546040517f4306e2a8000000000000000000000000000000000000000000000000000000008152600401610bd99190611e8b565b60405180910390fd5b610bec600161181f565b6000610bf860016116a7565b90506040518060e001604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610dd993929190611cf9565b600060405180830381600087803b158015610df357600080fd5b505af1158015610e07573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff16827fc69b2b721ff6c32f30acabd6e63422f03ab9f210644b7967c62e3c21e7037e25336000876000604051610e5b9493929190611d30565b60405180910390a4506001600081905550505050565b60606000806000610e8260016116a7565b90506000610e9060026116a7565b82610e9b9190611f59565b90506000861415610eab57600195505b8681610eb79190611f59565b861115610ecd578681610eca9190611f59565b95505b60008667ffffffffffffffff811115610ee957610ee86120c4565b5b604051908082528060200260200182016040528015610f2257816020015b610f0f611835565b815260200190600190039081610f075790505b5090506000805b8481108015610f3757508882105b1561114d57600560006001838d610f4e9190611f03565b610f589190611f03565b815260200190815260200160002060060160009054906101000a900460ff1661113a576000600560006001848e610f8f9190611f03565b610f999190611f03565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff16151515158152505085858151811061111e5761111d612095565b5b602002602001018190525083806111349061201d565b94505050505b80806111459061201d565b915050610f29565b5081888a61115b9190611f03565b84965096509650505050509250925092565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260005414156111dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d490611e35565b60405180910390fd5b600260008190555060006005600083815260200190815260200160002060050154905060006005600084815260200190815260200160002060020154905081341461125d576040517fb0cca22b00000000000000000000000000000000000000000000000000000000815260040161125490611dd5565b60405180910390fd5b6005600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156112d9573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b815260040161131793929190611cf9565b600060405180830381600087803b15801561133157600080fd5b505af1158015611345573d6000803e3d6000fd5b50505050336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060060160006101000a81548160ff0219169083151502179055506113d7600261181f565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050158015611441573d6000803e3d6000fd5b50808473ffffffffffffffffffffffffffffffffffffffff16847fc69b2b721ff6c32f30acabd6e63422f03ab9f210644b7967c62e3c21e7037e256005600088815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338760016040516114c79493929190611cb4565b60405180910390a4505060016000819055505050565b6000600454905090565b6114ef611835565b600182108015611507575061150460016116a7565b82115b15611547576040517ff1bfa95b00000000000000000000000000000000000000000000000000000000815260040161153e90611df5565b60405180910390fd5b600560008381526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250509050919050565b600081600001549050919050565b6000806000905060005b83811015611760573373ffffffffffffffffffffffffffffffffffffffff16600560006001846116ef9190611f03565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561174d5760018261174a9190611f03565b91505b80806117589061201d565b9150506116bf565b5080915050919050565b6000806000905060005b83811015611815573373ffffffffffffffffffffffffffffffffffffffff16600560006001846117a49190611f03565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611802576001826117ff9190611f03565b91505b808061180d9061201d565b915050611774565b5080915050919050565b6001816000016000828254019250508190555050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000813590506118c581612211565b92915050565b6000813590506118da81612228565b92915050565b600080604083850312156118f7576118f66120f3565b5b6000611905858286016118b6565b9250506020611916858286016118cb565b9150509250929050565b600080600060608486031215611939576119386120f3565b5b6000611947868287016118b6565b9350506020611958868287016118cb565b9250506040611969868287016118cb565b9150509250925092565b600060208284031215611989576119886120f3565b5b6000611997848285016118cb565b91505092915050565b600080604083850312156119b7576119b66120f3565b5b60006119c5858286016118cb565b92505060206119d6858286016118cb565b9150509250929050565b60006119ec8383611b5f565b60e08301905092915050565b611a0181611fe7565b82525050565b611a1081611f9f565b82525050565b611a1f81611f8d565b82525050565b611a2e81611f8d565b82525050565b6000611a3f82611ec9565b611a498185611ee1565b9350611a5483611eb9565b8060005b83811015611a85578151611a6c88826119e0565b9750611a7783611ed4565b925050600181019050611a58565b5085935050505092915050565b611a9b81611fb1565b82525050565b611aaa81611fb1565b82525050565b6000611abd603c83611ef2565b9150611ac8826120f8565b604082019050919050565b6000611ae0601183611ef2565b9150611aeb82612147565b602082019050919050565b6000611b03601883611ef2565b9150611b0e82612170565b602082019050919050565b6000611b26602483611ef2565b9150611b3182612199565b604082019050919050565b6000611b49601f83611ef2565b9150611b54826121e8565b602082019050919050565b60e082016000820151611b756000850182611c7b565b506020820151611b886020850182611a16565b506040820151611b9b6040850182611c7b565b506060820151611bae6060850182611a07565b506080820151611bc16080850182611a07565b5060a0820151611bd460a0850182611c7b565b5060c0820151611be760c0850182611a92565b50505050565b60e082016000820151611c036000850182611c7b565b506020820151611c166020850182611a16565b506040820151611c296040850182611c7b565b506060820151611c3c6060850182611a07565b506080820151611c4f6080850182611a07565b5060a0820151611c6260a0850182611c7b565b5060c0820151611c7560c0850182611a92565b50505050565b611c8481611fdd565b82525050565b611c9381611fdd565b82525050565b6000602082019050611cae6000830184611a25565b92915050565b6000608082019050611cc960008301876119f8565b611cd66020830186611a25565b611ce36040830185611c8a565b611cf06060830184611aa1565b95945050505050565b6000606082019050611d0e6000830186611a25565b611d1b6020830185611a25565b611d286040830184611c8a565b949350505050565b6000608082019050611d456000830187611a25565b611d526020830186611a25565b611d5f6040830185611c8a565b611d6c6060830184611aa1565b95945050505050565b60006020820190508181036000830152611d8f8184611a34565b905092915050565b60006060820190508181036000830152611db18186611a34565b9050611dc06020830185611c8a565b611dcd6040830184611c8a565b949350505050565b60006020820190508181036000830152611dee81611ab0565b9050919050565b60006020820190508181036000830152611e0e81611ad3565b9050919050565b60006020820190508181036000830152611e2e81611af6565b9050919050565b60006020820190508181036000830152611e4e81611b3c565b9050919050565b600060e082019050611e6a6000830184611bed565b92915050565b6000602082019050611e856000830184611c8a565b92915050565b6000604082019050611ea06000830184611c8a565b8181036020830152611eb181611b19565b905092915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611f0e82611fdd565b9150611f1983611fdd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f4e57611f4d612066565b5b828201905092915050565b6000611f6482611fdd565b9150611f6f83611fdd565b925082821015611f8257611f81612066565b5b828203905092915050565b6000611f9882611fbd565b9050919050565b6000611faa82611fbd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611ff282611ff9565b9050919050565b60006120048261200b565b9050919050565b600061201682611fbd565b9050919050565b600061202882611fdd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561205b5761205a612066565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520707572636861736500000000602082015250565b7f5072656d697373696f6e2064656e696564000000000000000000000000000000600082015250565b7f5072696365206d7573742062652061626f7665207a65726f0000000000000000600082015250565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61221a81611f8d565b811461222557600080fd5b50565b61223181611fdd565b811461223c57600080fd5b5056fea2646970667358221220bfde97e0c3ca41c40d342e342932fab50b30c7ad4ef7d3105e673f3b15f910e064736f6c63430008070033";

type NFTMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarket__factory extends ContractFactory {
  constructor(...args: NFTMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTMarket> {
    return super.deploy(overrides || {}) as Promise<NFTMarket>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTMarket {
    return super.attach(address) as NFTMarket;
  }
  override connect(signer: Signer): NFTMarket__factory {
    return super.connect(signer) as NFTMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketInterface {
    return new utils.Interface(_abi) as NFTMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMarket {
    return new Contract(address, _abi, signerOrProvider) as NFTMarket;
  }
}
