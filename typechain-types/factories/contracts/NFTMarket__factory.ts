/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { NFTMarket, NFTMarketInterface } from "../../contracts/NFTMarket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requiered",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__ListingFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__Price",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__SetListingFee",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sold",
        type: "bool",
      },
    ],
    name: "marketItemNFT",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getListingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNFTByOwner",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNFTBySeller",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setListingFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506608e1bc9bf04000600481905550611c00806100776000396000f3fe60806040526004361061007b5760003560e01c806358eb2df51161004e57806358eb2df51461012a578063893d20e814610146578063a82ba76f14610171578063b8fe6abe1461018d5761007b565b8063035b987e1461008057806303976f76146100ab578063131dbd09146100d657806329aa3a42146100ff575b600080fd5b34801561008c57600080fd5b506100956101b8565b6040516100a29190611759565b60405180910390f35b3480156100b757600080fd5b506100c0610481565b6040516100cd9190611759565b60405180910390f35b3480156100e257600080fd5b506100fd60048036038101906100f89190611425565b61074a565b005b34801561010b57600080fd5b506101146107e4565b6040516101219190611759565b60405180910390f35b610144600480360381019061013f91906113d2565b610a77565b005b34801561015257600080fd5b5061015b610ddf565b604051610168919061167d565b60405180910390f35b61018b60048036038101906101869190611392565b610e09565b005b34801561019957600080fd5b506101a261114f565b6040516101af91906117fb565b60405180910390f35b606060006101c66001611159565b905060006101d382611167565b90506000808267ffffffffffffffff8111156101f2576101f1611a4f565b5b60405190808252806020026020018201604052801561022b57816020015b6102186112e7565b8152602001906001900390816102105790505b50905060005b84811015610476573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610261919061188e565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610463576000600560006001846102c2919061188e565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff16151515158152505084868151811061044757610446611a20565b5b6020026020010181905250848061045d906119a8565b95505050505b808061046e906119a8565b915050610231565b508094505050505090565b6060600061048f6001611159565b9050600061049c8261121c565b90506000808267ffffffffffffffff8111156104bb576104ba611a4f565b5b6040519080825280602002602001820160405280156104f457816020015b6104e16112e7565b8152602001906001900390816104d95790505b50905060005b8481101561073f573373ffffffffffffffffffffffffffffffffffffffff166005600060018461052a919061188e565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561072c5760006005600060018461058b919061188e565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106107105761070f611a20565b5b60200260200101819052508480610726906119a8565b95505050505b8080610737906119a8565b9150506104fa565b508094505050505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107da576040517f1ff487320000000000000000000000000000000000000000000000000000000081526004016107d19061179b565b60405180910390fd5b8060048190555050565b606060006107f26001611159565b905060006108006002611159565b8261080b91906118e4565b905060008167ffffffffffffffff81111561082957610828611a4f565b5b60405190808252806020026020018201604052801561086257816020015b61084f6112e7565b8152602001906001900390816108475790505b5090506000805b84811015610a6c5760056000600183610882919061188e565b815260200190815260200160002060060160009054906101000a900460ff16610a59576000600560006001846108b8919061188e565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff161515151581525050858581518110610a3d57610a3c611a20565b5b60200260200101819052508380610a53906119a8565b94505050505b8080610a64906119a8565b915050610869565b508194505050505090565b60026000541415610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab4906117db565b60405180910390fd5b600260008190555060008111610b08576040517fb0cca22b000000000000000000000000000000000000000000000000000000008152600401610aff906117bb565b60405180910390fd5b6004543414610b50576004546040517f4306e2a8000000000000000000000000000000000000000000000000000000008152600401610b479190611816565b60405180910390fd5b610b5a60016112d1565b6000610b666001611159565b90506040518060e001604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610d47939291906116dd565b600060405180830381600087803b158015610d6157600080fd5b505af1158015610d75573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff16827fc69b2b721ff6c32f30acabd6e63422f03ab9f210644b7967c62e3c21e7037e25336000876000604051610dc99493929190611714565b60405180910390a4506001600081905550505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026000541415610e4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e46906117db565b60405180910390fd5b6002600081905550600060056000838152602001908152602001600020600501549050600060056000848152602001908152602001600020600201549050813414610ecf576040517fb0cca22b000000000000000000000000000000000000000000000000000000008152600401610ec69061177b565b60405180910390fd5b6005600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610f4b573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610f89939291906116dd565b600060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b50505050336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060060160006101000a81548160ff02191690831515021790555061104960026112d1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f193505050501580156110b3573d6000803e3d6000fd5b50808473ffffffffffffffffffffffffffffffffffffffff16847fc69b2b721ff6c32f30acabd6e63422f03ab9f210644b7967c62e3c21e7037e256005600088815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338760016040516111399493929190611698565b60405180910390a4505060016000819055505050565b6000600454905090565b600081600001549050919050565b6000806000905060005b83811015611212573373ffffffffffffffffffffffffffffffffffffffff16600560006001846111a1919061188e565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111ff576001826111fc919061188e565b91505b808061120a906119a8565b915050611171565b5080915050919050565b6000806000905060005b838110156112c7573373ffffffffffffffffffffffffffffffffffffffff1660056000600184611256919061188e565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112b4576001826112b1919061188e565b91505b80806112bf906119a8565b915050611226565b5080915050919050565b6001816000016000828254019250508190555050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b60008135905061137781611b9c565b92915050565b60008135905061138c81611bb3565b92915050565b600080604083850312156113a9576113a8611a7e565b5b60006113b785828601611368565b92505060206113c88582860161137d565b9150509250929050565b6000806000606084860312156113eb576113ea611a7e565b5b60006113f986828701611368565b935050602061140a8682870161137d565b925050604061141b8682870161137d565b9150509250925092565b60006020828403121561143b5761143a611a7e565b5b60006114498482850161137d565b91505092915050565b600061145e83836115d1565b60e08301905092915050565b61147381611972565b82525050565b6114828161192a565b82525050565b61149181611918565b82525050565b6114a081611918565b82525050565b60006114b182611854565b6114bb818561186c565b93506114c683611844565b8060005b838110156114f75781516114de8882611452565b97506114e98361185f565b9250506001810190506114ca565b5085935050505092915050565b61150d8161193c565b82525050565b61151c8161193c565b82525050565b600061152f603c8361187d565b915061153a82611a83565b604082019050919050565b600061155260118361187d565b915061155d82611ad2565b602082019050919050565b600061157560188361187d565b915061158082611afb565b602082019050919050565b600061159860248361187d565b91506115a382611b24565b604082019050919050565b60006115bb601f8361187d565b91506115c682611b73565b602082019050919050565b60e0820160008201516115e7600085018261165f565b5060208201516115fa6020850182611488565b50604082015161160d604085018261165f565b5060608201516116206060850182611479565b5060808201516116336080850182611479565b5060a082015161164660a085018261165f565b5060c082015161165960c0850182611504565b50505050565b61166881611968565b82525050565b61167781611968565b82525050565b60006020820190506116926000830184611497565b92915050565b60006080820190506116ad600083018761146a565b6116ba6020830186611497565b6116c7604083018561166e565b6116d46060830184611513565b95945050505050565b60006060820190506116f26000830186611497565b6116ff6020830185611497565b61170c604083018461166e565b949350505050565b60006080820190506117296000830187611497565b6117366020830186611497565b611743604083018561166e565b6117506060830184611513565b95945050505050565b6000602082019050818103600083015261177381846114a6565b905092915050565b6000602082019050818103600083015261179481611522565b9050919050565b600060208201905081810360008301526117b481611545565b9050919050565b600060208201905081810360008301526117d481611568565b9050919050565b600060208201905081810360008301526117f4816115ae565b9050919050565b6000602082019050611810600083018461166e565b92915050565b600060408201905061182b600083018461166e565b818103602083015261183c8161158b565b905092915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061189982611968565b91506118a483611968565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118d9576118d86119f1565b5b828201905092915050565b60006118ef82611968565b91506118fa83611968565b92508282101561190d5761190c6119f1565b5b828203905092915050565b600061192382611948565b9050919050565b600061193582611948565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061197d82611984565b9050919050565b600061198f82611996565b9050919050565b60006119a182611948565b9050919050565b60006119b382611968565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119e6576119e56119f1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520707572636861736500000000602082015250565b7f5072656d697373696f6e2064656e696564000000000000000000000000000000600082015250565b7f5072696365206d7573742062652061626f7665207a65726f0000000000000000600082015250565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b611ba581611918565b8114611bb057600080fd5b50565b611bbc81611968565b8114611bc757600080fd5b5056fea26469706673582212207d1ad4cf61ef1d6424b4e0fcdfc2aa33e76f95048dc6003777e790ffe33cf86564736f6c63430008070033";

type NFTMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarket__factory extends ContractFactory {
  constructor(...args: NFTMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTMarket> {
    return super.deploy(overrides || {}) as Promise<NFTMarket>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTMarket {
    return super.attach(address) as NFTMarket;
  }
  override connect(signer: Signer): NFTMarket__factory {
    return super.connect(signer) as NFTMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketInterface {
    return new utils.Interface(_abi) as NFTMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMarket {
    return new Contract(address, _abi, signerOrProvider) as NFTMarket;
  }
}
