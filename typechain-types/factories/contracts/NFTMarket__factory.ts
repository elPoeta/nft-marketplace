/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { NFTMarket, NFTMarketInterface } from "../../contracts/NFTMarket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__ItemId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requiered",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__ListingFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__Price",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__SetListingFee",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "createAt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sold",
        type: "bool",
      },
    ],
    name: "marketItemNFT",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sold",
        type: "uint256",
      },
    ],
    name: "fetchMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createAt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "nextOffset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSolded",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "fetchMarketItemsByTime",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createAt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getItemById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createAt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getListingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createAt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNFTByOwner",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createAt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNFTBySeller",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createAt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalItems",
    outputs: [
      {
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setListingFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506608e1bc9bf04000600481905550612795806100776000396000f3fe6080604052600436106100a75760003560e01c8063597a8f9d11610064578063597a8f9d1461019d578063893d20e8146101dc578063a82ba76f14610207578063af5f172d14610223578063b8fe6abe14610260578063cd2f07101461028b576100a7565b8063035b987e146100ac57806303976f76146100d7578063131dbd091461010257806329aa3a421461012b578063310aac691461015657806358eb2df514610181575b600080fd5b3480156100b857600080fd5b506100c16102c8565b6040516100ce9190612294565b60405180910390f35b3480156100e357600080fd5b506100ec61059c565b6040516100f99190612294565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190611dfa565b610870565b005b34801561013757600080fd5b5061014061090a565b60405161014d9190612294565b60405180910390f35b34801561016257600080fd5b5061016b610ba8565b6040516101789190612390565b60405180910390f35b61019b60048036038101906101969190611da7565b610bd8565b005b3480156101a957600080fd5b506101c460048036038101906101bf9190611e67565b610f59565b6040516101d3939291906122b6565b60405180910390f35b3480156101e857600080fd5b506101f161129c565b6040516101fe919061219c565b60405180910390f35b610221600480360381019061021c9190611d67565b6112c6565b005b34801561022f57600080fd5b5061024a60048036038101906102459190611e27565b611624565b6040516102579190612294565b60405180910390f35b34801561026c57600080fd5b50610275611951565b6040516102829190612390565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190611dfa565b61195b565b6040516102bf9190612374565b60405180910390f35b606060006102d66001611b26565b905060006102e382611b34565b90506000808267ffffffffffffffff811115610302576103016125e4565b5b60405190808252806020026020018201604052801561033b57816020015b610328611cb4565b8152602001906001900390816103205790505b50905060005b84811015610591573373ffffffffffffffffffffffffffffffffffffffff16600560006001846103719190612423565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561057e576000600560006001846103d29190612423565b815260200190815260200160002060000154905060006005600083815260200190815260200160002090508060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581525050848681518110610562576105616125b5565b5b602002602001018190525084806105789061253d565b95505050505b80806105899061253d565b915050610341565b508094505050505090565b606060006105aa6001611b26565b905060006105b782611be9565b90506000808267ffffffffffffffff8111156105d6576105d56125e4565b5b60405190808252806020026020018201604052801561060f57816020015b6105fc611cb4565b8152602001906001900390816105f45790505b50905060005b84811015610865573373ffffffffffffffffffffffffffffffffffffffff16600560006001846106459190612423565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610852576000600560006001846106a69190612423565b815260200190815260200160002060000154905060006005600083815260200190815260200160002090508060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581525050848681518110610836576108356125b5565b5b6020026020010181905250848061084c9061253d565b95505050505b808061085d9061253d565b915050610615565b508094505050505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610900576040517f1ff487320000000000000000000000000000000000000000000000000000000081526004016108f790612314565b60405180910390fd5b8060048190555050565b606060006109186001611b26565b905060006109266002611b26565b826109319190612479565b905060008167ffffffffffffffff81111561094f5761094e6125e4565b5b60405190808252806020026020018201604052801561098857816020015b610975611cb4565b81526020019060019003908161096d5790505b5090506000805b84811015610b9d57600560006001836109a89190612423565b815260200190815260200160002060070160009054906101000a900460ff16610b8a576000600560006001846109de9190612423565b815260200190815260200160002060000154905060006005600083815260200190815260200160002090508060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581525050858581518110610b6e57610b6d6125b5565b5b60200260200101819052508380610b849061253d565b94505050505b8080610b959061253d565b91505061098f565b508194505050505090565b600080610bb56001611b26565b90506000610bc36002611b26565b82610bce9190612479565b9050809250505090565b60026000541415610c1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1590612354565b60405180910390fd5b600260008190555060008111610c69576040517fb0cca22b000000000000000000000000000000000000000000000000000000008152600401610c6090612334565b60405180910390fd5b6004543414610cb1576004546040517f4306e2a8000000000000000000000000000000000000000000000000000000008152600401610ca891906123ab565b60405180910390fd5b610cbb6001611c9e565b6000610cc76001611b26565b905060004290506040518061010001604052808381526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200184815260200182815260200160001515815250600560008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055509050508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610ebe9392919061220a565b600060405180830381600087803b158015610ed857600080fd5b505af1158015610eec573d6000803e3d6000fd5b50505050838573ffffffffffffffffffffffffffffffffffffffff16837f324e86ff66d7c77debc9fe7d78660701077b278899494594ed090d480aa915dd33600088876000604051610f42959493929190612241565b60405180910390a450506001600081905550505050565b60606000806000610f6a6001611b26565b90506000610f786002611b26565b82610f839190612479565b90506000871415610f9357600196505b8781610f9f9190612479565b871115610fb5578781610fb29190612479565b96505b60008767ffffffffffffffff811115610fd157610fd06125e4565b5b60405190808252806020026020018201604052801561100a57816020015b610ff7611cb4565b815260200190600190039081610fef5790505b5090506000806000805b868110801561102257508b84105b156112555760018b828f6110369190612423565b6110409190612423565b61104a9190612423565b9250868311611242576005600084815260200190815260200160002060070160009054906101000a900460ff166112325760006005600085815260200190815260200160002060000154905060006005600083815260200190815260200160002090508060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581525050878781518110611212576112116125b5565b5b602002602001018190525085806112289061253d565b9650505050611241565b818061123d9061253d565b9250505b5b808061124d9061253d565b915050611014565b508560018b8e6112659190612423565b61126f9190612423565b1115611279578990505b838b8d6112869190612423565b8298509850985050505050505093509350939050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002600054141561130c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130390612354565b60405180910390fd5b600260008190555060006005600083815260200190815260200160002060050154905060006005600084815260200190815260200160002060020154905081341461138c576040517fb0cca22b000000000000000000000000000000000000000000000000000000008152600401611383906122f4565b60405180910390fd5b6005600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611408573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b81526004016114469392919061220a565b600060405180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b50505050336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060070160006101000a81548160ff0219169083151502179055506115066002611c9e565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050158015611570573d6000803e3d6000fd5b50808473ffffffffffffffffffffffffffffffffffffffff16847f324e86ff66d7c77debc9fe7d78660701077b278899494594ed090d480aa915dd6005600088815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163387600560008b815260200190815260200160002060060154600160405161160e9594939291906121b7565b60405180910390a4505060016000819055505050565b606060006116326001611b26565b905060006116406002611b26565b8261164b9190612479565b9050600060028261165c9190612479565b9050600085141561166c57600194505b80826116789190612479565b85111561168e57808261168b9190612479565b94505b60008567ffffffffffffffff8111156116aa576116a96125e4565b5b6040519080825280602002602001820160405280156116e357816020015b6116d0611cb4565b8152602001906001900390816116c85790505b5090506000805b85811080156116f857508782105b1561194257600560006001838761170f9190612423565b6117199190612423565b815260200190815260200160002060070160009054906101000a900460ff1661192f57600060056000600184886117509190612423565b61175a9190612423565b8152602001908152602001600020600001549050600060056000838152602001908152602001600020905060008b14806117a85750428160060154111580156117a757508a816006015410155b5b1561192c578060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581525050858581518110611912576119116125b5565b5b602002602001018190525083806119289061253d565b9450505b50505b808061193a9061253d565b9150506116ea565b50819550505050505092915050565b6000600454905090565b611963611cb4565b60018210801561197b57506119786001611b26565b82115b156119bb576040517ff1bfa95b0000000000000000000000000000000000000000000000000000000081526004016119b290612314565b60405180910390fd5b6005600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff1615151515815250509050919050565b600081600001549050919050565b6000806000905060005b83811015611bdf573373ffffffffffffffffffffffffffffffffffffffff1660056000600184611b6e9190612423565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611bcc57600182611bc99190612423565b91505b8080611bd79061253d565b915050611b3e565b5080915050919050565b6000806000905060005b83811015611c94573373ffffffffffffffffffffffffffffffffffffffff1660056000600184611c239190612423565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c8157600182611c7e9190612423565b91505b8080611c8c9061253d565b915050611bf3565b5080915050919050565b6001816000016000828254019250508190555050565b60405180610100016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b600081359050611d4c81612731565b92915050565b600081359050611d6181612748565b92915050565b60008060408385031215611d7e57611d7d612613565b5b6000611d8c85828601611d3d565b9250506020611d9d85828601611d52565b9150509250929050565b600080600060608486031215611dc057611dbf612613565b5b6000611dce86828701611d3d565b9350506020611ddf86828701611d52565b9250506040611df086828701611d52565b9150509250925092565b600060208284031215611e1057611e0f612613565b5b6000611e1e84828501611d52565b91505092915050565b60008060408385031215611e3e57611e3d612613565b5b6000611e4c85828601611d52565b9250506020611e5d85828601611d52565b9150509250929050565b600080600060608486031215611e8057611e7f612613565b5b6000611e8e86828701611d52565b9350506020611e9f86828701611d52565b9250506040611eb086828701611d52565b9150509250925092565b6000611ec6838361203a565b6101008301905092915050565b611edc81612507565b82525050565b611eeb816124bf565b82525050565b611efa816124ad565b82525050565b611f09816124ad565b82525050565b6000611f1a826123e9565b611f248185612401565b9350611f2f836123d9565b8060005b83811015611f60578151611f478882611eba565b9750611f52836123f4565b925050600181019050611f33565b5085935050505092915050565b611f76816124d1565b82525050565b611f85816124d1565b82525050565b6000611f98603c83612412565b9150611fa382612618565b604082019050919050565b6000611fbb601183612412565b9150611fc682612667565b602082019050919050565b6000611fde601883612412565b9150611fe982612690565b602082019050919050565b6000612001602483612412565b915061200c826126b9565b604082019050919050565b6000612024601f83612412565b915061202f82612708565b602082019050919050565b61010082016000820151612051600085018261217e565b5060208201516120646020850182611ef1565b506040820151612077604085018261217e565b50606082015161208a6060850182611ee2565b50608082015161209d6080850182611ee2565b5060a08201516120b060a085018261217e565b5060c08201516120c360c085018261217e565b5060e08201516120d660e0850182611f6d565b50505050565b610100820160008201516120f3600085018261217e565b5060208201516121066020850182611ef1565b506040820151612119604085018261217e565b50606082015161212c6060850182611ee2565b50608082015161213f6080850182611ee2565b5060a082015161215260a085018261217e565b5060c082015161216560c085018261217e565b5060e082015161217860e0850182611f6d565b50505050565b612187816124fd565b82525050565b612196816124fd565b82525050565b60006020820190506121b16000830184611f00565b92915050565b600060a0820190506121cc6000830188611ed3565b6121d96020830187611f00565b6121e6604083018661218d565b6121f3606083018561218d565b6122006080830184611f7c565b9695505050505050565b600060608201905061221f6000830186611f00565b61222c6020830185611f00565b612239604083018461218d565b949350505050565b600060a0820190506122566000830188611f00565b6122636020830187611f00565b612270604083018661218d565b61227d606083018561218d565b61228a6080830184611f7c565b9695505050505050565b600060208201905081810360008301526122ae8184611f0f565b905092915050565b600060608201905081810360008301526122d08186611f0f565b90506122df602083018561218d565b6122ec604083018461218d565b949350505050565b6000602082019050818103600083015261230d81611f8b565b9050919050565b6000602082019050818103600083015261232d81611fae565b9050919050565b6000602082019050818103600083015261234d81611fd1565b9050919050565b6000602082019050818103600083015261236d81612017565b9050919050565b60006101008201905061238a60008301846120dc565b92915050565b60006020820190506123a5600083018461218d565b92915050565b60006040820190506123c0600083018461218d565b81810360208301526123d181611ff4565b905092915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061242e826124fd565b9150612439836124fd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561246e5761246d612586565b5b828201905092915050565b6000612484826124fd565b915061248f836124fd565b9250828210156124a2576124a1612586565b5b828203905092915050565b60006124b8826124dd565b9050919050565b60006124ca826124dd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061251282612519565b9050919050565b60006125248261252b565b9050919050565b6000612536826124dd565b9050919050565b6000612548826124fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561257b5761257a612586565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520707572636861736500000000602082015250565b7f5072656d697373696f6e2064656e696564000000000000000000000000000000600082015250565b7f5072696365206d7573742062652061626f7665207a65726f0000000000000000600082015250565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61273a816124ad565b811461274557600080fd5b50565b612751816124fd565b811461275c57600080fd5b5056fea264697066735822122090fba50adedd465ea7b447f7df14d5d169cceebd264016d20b3dbbca2dc8e6ee64736f6c63430008070033";

type NFTMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarket__factory extends ContractFactory {
  constructor(...args: NFTMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTMarket> {
    return super.deploy(overrides || {}) as Promise<NFTMarket>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTMarket {
    return super.attach(address) as NFTMarket;
  }
  override connect(signer: Signer): NFTMarket__factory {
    return super.connect(signer) as NFTMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketInterface {
    return new utils.Interface(_abi) as NFTMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMarket {
    return new Contract(address, _abi, signerOrProvider) as NFTMarket;
  }
}
