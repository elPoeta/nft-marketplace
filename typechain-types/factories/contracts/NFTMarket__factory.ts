/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { NFTMarket, NFTMarketInterface } from "../../contracts/NFTMarket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requiered",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__ListingFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NFTMarket__Price",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sold",
        type: "bool",
      },
    ],
    name: "marketItemNFT",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getListingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNFTByOwner",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNFTBySeller",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setListingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506608e1bc9bf04000600481905550611b56806100776000396000f3fe60806040526004361061007b5760003560e01c806358eb2df51161004e57806358eb2df51461013e578063893d20e81461015a578063a82ba76f14610185578063b8fe6abe146101a15761007b565b8063035b987e1461008057806303976f76146100ab578063131dbd09146100d657806329aa3a4214610113575b600080fd5b34801561008c57600080fd5b506100956101cc565b6040516100a291906116f8565b60405180910390f35b3480156100b757600080fd5b506100c0610495565b6040516100cd91906116f8565b60405180910390f35b3480156100e257600080fd5b506100fd60048036038101906100f891906113e7565b61075e565b60405161010a919061177a565b60405180910390f35b34801561011f57600080fd5b506101286107a6565b60405161013591906116f8565b60405180910390f35b61015860048036038101906101539190611394565b610a39565b005b34801561016657600080fd5b5061016f610da1565b60405161017c919061161c565b60405180910390f35b61019f600480360381019061019a9190611354565b610dcb565b005b3480156101ad57600080fd5b506101b6611111565b6040516101c3919061177a565b60405180910390f35b606060006101da600161111b565b905060006101e782611129565b90506000808267ffffffffffffffff811115610206576102056119ce565b5b60405190808252806020026020018201604052801561023f57816020015b61022c6112a9565b8152602001906001900390816102245790505b50905060005b8481101561048a573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610275919061180d565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610477576000600560006001846102d6919061180d565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff16151515158152505084868151811061045b5761045a61199f565b5b6020026020010181905250848061047190611927565b95505050505b808061048290611927565b915050610245565b508094505050505090565b606060006104a3600161111b565b905060006104b0826111de565b90506000808267ffffffffffffffff8111156104cf576104ce6119ce565b5b60405190808252806020026020018201604052801561050857816020015b6104f56112a9565b8152602001906001900390816104ed5790505b50905060005b84811015610753573373ffffffffffffffffffffffffffffffffffffffff166005600060018461053e919061180d565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107405760006005600060018461059f919061180d565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106107245761072361199f565b5b6020026020010181905250848061073a90611927565b95505050505b808061074b90611927565b91505061050e565b508094505050505090565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561079c57816004819055505b6004549050919050565b606060006107b4600161111b565b905060006107c2600261111b565b826107cd9190611863565b905060008167ffffffffffffffff8111156107eb576107ea6119ce565b5b60405190808252806020026020018201604052801561082457816020015b6108116112a9565b8152602001906001900390816108095790505b5090506000805b84811015610a2e5760056000600183610844919061180d565b815260200190815260200160002060060160009054906101000a900460ff16610a1b5760006005600060018461087a919061180d565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508585815181106109ff576109fe61199f565b5b60200260200101819052508380610a1590611927565b94505050505b8080610a2690611927565b91505061082b565b508194505050505090565b60026000541415610a7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a769061175a565b60405180910390fd5b600260008190555060008111610aca576040517fb0cca22b000000000000000000000000000000000000000000000000000000008152600401610ac19061173a565b60405180910390fd5b6004543414610b12576004546040517f4306e2a8000000000000000000000000000000000000000000000000000000008152600401610b099190611795565b60405180910390fd5b610b1c6001611293565b6000610b28600161111b565b90506040518060e001604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610d099392919061167c565b600060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff16827fc69b2b721ff6c32f30acabd6e63422f03ab9f210644b7967c62e3c21e7037e25336000876000604051610d8b94939291906116b3565b60405180910390a4506001600081905550505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026000541415610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e089061175a565b60405180910390fd5b6002600081905550600060056000838152602001908152602001600020600501549050600060056000848152602001908152602001600020600201549050813414610e91576040517fb0cca22b000000000000000000000000000000000000000000000000000000008152600401610e889061171a565b60405180910390fd5b6005600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610f0d573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610f4b9392919061167c565b600060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b50505050336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060060160006101000a81548160ff02191690831515021790555061100b6002611293565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050158015611075573d6000803e3d6000fd5b50808473ffffffffffffffffffffffffffffffffffffffff16847fc69b2b721ff6c32f30acabd6e63422f03ab9f210644b7967c62e3c21e7037e256005600088815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338760016040516110fb9493929190611637565b60405180910390a4505060016000819055505050565b6000600454905090565b600081600001549050919050565b6000806000905060005b838110156111d4573373ffffffffffffffffffffffffffffffffffffffff1660056000600184611163919061180d565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111c1576001826111be919061180d565b91505b80806111cc90611927565b915050611133565b5080915050919050565b6000806000905060005b83811015611289573373ffffffffffffffffffffffffffffffffffffffff1660056000600184611218919061180d565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561127657600182611273919061180d565b91505b808061128190611927565b9150506111e8565b5080915050919050565b6001816000016000828254019250508190555050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b60008135905061133981611af2565b92915050565b60008135905061134e81611b09565b92915050565b6000806040838503121561136b5761136a6119fd565b5b60006113798582860161132a565b925050602061138a8582860161133f565b9150509250929050565b6000806000606084860312156113ad576113ac6119fd565b5b60006113bb8682870161132a565b93505060206113cc8682870161133f565b92505060406113dd8682870161133f565b9150509250925092565b6000602082840312156113fd576113fc6119fd565b5b600061140b8482850161133f565b91505092915050565b60006114208383611570565b60e08301905092915050565b611435816118f1565b82525050565b611444816118a9565b82525050565b61145381611897565b82525050565b61146281611897565b82525050565b6000611473826117d3565b61147d81856117eb565b9350611488836117c3565b8060005b838110156114b95781516114a08882611414565b97506114ab836117de565b92505060018101905061148c565b5085935050505092915050565b6114cf816118bb565b82525050565b6114de816118bb565b82525050565b60006114f1603c836117fc565b91506114fc82611a02565b604082019050919050565b60006115146018836117fc565b915061151f82611a51565b602082019050919050565b60006115376024836117fc565b915061154282611a7a565b604082019050919050565b600061155a601f836117fc565b915061156582611ac9565b602082019050919050565b60e08201600082015161158660008501826115fe565b506020820151611599602085018261144a565b5060408201516115ac60408501826115fe565b5060608201516115bf606085018261143b565b5060808201516115d2608085018261143b565b5060a08201516115e560a08501826115fe565b5060c08201516115f860c08501826114c6565b50505050565b611607816118e7565b82525050565b611616816118e7565b82525050565b60006020820190506116316000830184611459565b92915050565b600060808201905061164c600083018761142c565b6116596020830186611459565b611666604083018561160d565b61167360608301846114d5565b95945050505050565b60006060820190506116916000830186611459565b61169e6020830185611459565b6116ab604083018461160d565b949350505050565b60006080820190506116c86000830187611459565b6116d56020830186611459565b6116e2604083018561160d565b6116ef60608301846114d5565b95945050505050565b600060208201905081810360008301526117128184611468565b905092915050565b60006020820190508181036000830152611733816114e4565b9050919050565b6000602082019050818103600083015261175381611507565b9050919050565b600060208201905081810360008301526117738161154d565b9050919050565b600060208201905061178f600083018461160d565b92915050565b60006040820190506117aa600083018461160d565b81810360208301526117bb8161152a565b905092915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611818826118e7565b9150611823836118e7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561185857611857611970565b5b828201905092915050565b600061186e826118e7565b9150611879836118e7565b92508282101561188c5761188b611970565b5b828203905092915050565b60006118a2826118c7565b9050919050565b60006118b4826118c7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006118fc82611903565b9050919050565b600061190e82611915565b9050919050565b6000611920826118c7565b9050919050565b6000611932826118e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561196557611964611970565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520707572636861736500000000602082015250565b7f5072696365206d7573742062652061626f7665207a65726f0000000000000000600082015250565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b611afb81611897565b8114611b0657600080fd5b50565b611b12816118e7565b8114611b1d57600080fd5b5056fea264697066735822122058d47d6d3522884aecd204b17b5dcb1b4175540e3e21fd020bc0b02eeaafd72264736f6c63430008070033";

type NFTMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarket__factory extends ContractFactory {
  constructor(...args: NFTMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTMarket> {
    return super.deploy(overrides || {}) as Promise<NFTMarket>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTMarket {
    return super.attach(address) as NFTMarket;
  }
  override connect(signer: Signer): NFTMarket__factory {
    return super.connect(signer) as NFTMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketInterface {
    return new utils.Interface(_abi) as NFTMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMarket {
    return new Contract(address, _abi, signerOrProvider) as NFTMarket;
  }
}
